import { __decorate, __metadata } from 'tslib';
import * as i0 from '@angular/core';
import { ChangeDetectorRef, ElementRef, NgZone, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { fromEvent } from 'rxjs';
import { CommonModule } from '@angular/common';

/* eslint-disable */
const proxyInputs = (Cmp, inputs) => {
    const Prototype = Cmp.prototype;
    inputs.forEach(item => {
        Object.defineProperty(Prototype, item, {
            get() {
                return this.el[item];
            },
            set(val) {
                this.z.runOutsideAngular(() => (this.el[item] = val));
            }
        });
    });
};
const proxyMethods = (Cmp, methods) => {
    const Prototype = Cmp.prototype;
    methods.forEach(methodName => {
        Prototype[methodName] = function () {
            const args = arguments;
            return this.z.runOutsideAngular(() => this.el[methodName].apply(this.el, args));
        };
    });
};
const proxyOutputs = (instance, el, events) => {
    events.forEach(eventName => instance[eventName] = fromEvent(el, eventName));
};
const defineCustomElement = (tagName, customElement) => {
    if (customElement !== undefined &&
        typeof customElements !== 'undefined' &&
        !customElements.get(tagName)) {
        customElements.define(tagName, customElement);
    }
};
// tslint:disable-next-line: only-arrow-functions
function ProxyCmp(opts) {
    const decorator = function (cls) {
        const { defineCustomElementFn, inputs, methods } = opts;
        if (defineCustomElementFn !== undefined) {
            defineCustomElementFn();
        }
        if (inputs) {
            proxyInputs(cls, inputs);
        }
        if (methods) {
            proxyMethods(cls, methods);
        }
        return cls;
    };
    return decorator;
}

let PfButton = class PfButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
PfButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: PfButton, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
PfButton.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.3", type: PfButton, selector: "pf-button", inputs: { block: "block", disabled: "disabled", loading: "loading", mode: "mode", size: "size", theme: "theme", type: "type" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
PfButton = __decorate([
    ProxyCmp({
        defineCustomElementFn: undefined,
        inputs: ['block', 'disabled', 'loading', 'mode', 'size', 'theme', 'type']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], PfButton);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: PfButton, decorators: [{
            type: Component,
            args: [{
                    selector: 'pf-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['block', 'disabled', 'loading', 'mode', 'size', 'theme', 'type']
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; } });
let PfCheckbox = class PfCheckbox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
PfCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: PfCheckbox, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
PfCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.3", type: PfCheckbox, selector: "pf-checkbox", inputs: { block: "block", checked: "checked", class: "class", disabled: "disabled", mode: "mode", switchable: "switchable", value: "value" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
PfCheckbox = __decorate([
    ProxyCmp({
        defineCustomElementFn: undefined,
        inputs: ['block', 'checked', 'class', 'disabled', 'mode', 'switchable', 'value']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], PfCheckbox);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: PfCheckbox, decorators: [{
            type: Component,
            args: [{
                    selector: 'pf-checkbox',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['block', 'checked', 'class', 'disabled', 'mode', 'switchable', 'value']
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; } });
let PfDropdown = class PfDropdown {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
PfDropdown.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: PfDropdown, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
PfDropdown.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.3", type: PfDropdown, selector: "pf-dropdown", inputs: { class: "class", hideArrow: "hideArrow", isOpen: "isOpen", mode: "mode", openOnButtonClick: "openOnButtonClick" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
PfDropdown = __decorate([
    ProxyCmp({
        defineCustomElementFn: undefined,
        inputs: ['class', 'hideArrow', 'isOpen', 'mode', 'openOnButtonClick']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], PfDropdown);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: PfDropdown, decorators: [{
            type: Component,
            args: [{
                    selector: 'pf-dropdown',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['class', 'hideArrow', 'isOpen', 'mode', 'openOnButtonClick']
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; } });
let PfImage = class PfImage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
PfImage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: PfImage, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
PfImage.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.3", type: PfImage, selector: "pf-image", inputs: { alt: "alt", fallbackSrc: "fallbackSrc", height: "height", loading: "loading", rounded: "rounded", src: "src", width: "width" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
PfImage = __decorate([
    ProxyCmp({
        defineCustomElementFn: undefined,
        inputs: ['alt', 'fallbackSrc', 'height', 'loading', 'rounded', 'src', 'width']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], PfImage);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: PfImage, decorators: [{
            type: Component,
            args: [{
                    selector: 'pf-image',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['alt', 'fallbackSrc', 'height', 'loading', 'rounded', 'src', 'width']
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; } });
let PfPhoneInput = class PfPhoneInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
PfPhoneInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: PfPhoneInput, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
PfPhoneInput.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.3", type: PfPhoneInput, selector: "pf-phone-input", ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
PfPhoneInput = __decorate([
    ProxyCmp({
        defineCustomElementFn: undefined
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], PfPhoneInput);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: PfPhoneInput, decorators: [{
            type: Component,
            args: [{
                    selector: 'pf-phone-input',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; } });
let PfSelect = class PfSelect {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
PfSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: PfSelect, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
PfSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.3", type: PfSelect, selector: "pf-select", inputs: { block: "block", disabled: "disabled", label: "label", mode: "mode", options: "options", size: "size", type: "type", value: "value" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
PfSelect = __decorate([
    ProxyCmp({
        defineCustomElementFn: undefined,
        inputs: ['block', 'disabled', 'label', 'mode', 'options', 'size', 'type', 'value']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], PfSelect);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: PfSelect, decorators: [{
            type: Component,
            args: [{
                    selector: 'pf-select',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['block', 'disabled', 'label', 'mode', 'options', 'size', 'type', 'value']
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; } });

const DIRECTIVES = [
    PfButton,
    PfCheckbox,
    PfDropdown,
    PfImage,
    PfPhoneInput,
    PfSelect
];

class ProfabricComponentsModule {
}
ProfabricComponentsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: ProfabricComponentsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProfabricComponentsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.1.3", ngImport: i0, type: ProfabricComponentsModule, declarations: [PfButton, PfCheckbox, PfDropdown, PfImage, PfPhoneInput, PfSelect], imports: [CommonModule], exports: [PfButton, PfCheckbox, PfDropdown, PfImage, PfPhoneInput, PfSelect] });
ProfabricComponentsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: ProfabricComponentsModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: ProfabricComponentsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [...DIRECTIVES],
                    exports: [...DIRECTIVES],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { PfButton, PfCheckbox, PfDropdown, PfImage, PfPhoneInput, PfSelect, ProfabricComponentsModule };
//# sourceMappingURL=profabric-angular-components.mjs.map
