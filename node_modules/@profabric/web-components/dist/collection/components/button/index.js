import { Component, h, Element, Prop, Host, Listen, Watch, State, } from '@stencil/core';
export class Button {
  constructor() {
    this.tempDisabled = false;
    this.theme = 'primary';
    this.size = 'default';
    this.type = 'button';
    this.loading = false;
    this.disabled = false;
    this.block = false;
  }
  watchLoading(currentValue) {
    if (currentValue) {
      this.tempDisabled = this.disabled;
      this.disabled = true;
    }
    else {
      this.disabled = this.tempDisabled;
    }
  }
  onClick(event) {
    if (this.disabled) {
      event.preventDefault();
      event.stopPropagation();
      return;
    }
    const form = this.el.closest('form');
    if (form) {
      event.preventDefault();
      const fakeSubmit = document.createElement('button');
      fakeSubmit.type = 'submit';
      fakeSubmit.style.display = 'none';
      form.appendChild(fakeSubmit);
      fakeSubmit.click();
      fakeSubmit.remove();
    }
  }
  componentWillLoad() {
    this.watchLoading(this.loading);
  }
  render() {
    let innerTemplate = h("slot", null);
    if (this.loading) {
      innerTemplate = (h("div", { class: "center-items", style: { padding: this.size === 'large' ? '3px 0' : '0' } },
        h("div", { class: "spinner-border spinner-border-sm", role: "status" },
          h("span", { class: {
              'visually-hidden': this.mode === 'bs5',
              'sr-only': this.mode === 'bs4',
            } }, "Loading..."))));
    }
    return (h(Host, { style: { width: this.block ? '100%' : 'inherit', display: 'block' } },
      h("button", { type: this.type, class: {
          btn: true,
          [`btn-${this.theme}`]: true,
          'btn-sm': this.size === 'small',
          'btn-lg': this.size === 'large',
          disabled: this.disabled,
        }, style: { width: this.block ? '100%' : 'inherit' }, disabled: this.disabled }, innerTemplate)));
  }
  static get is() { return "pf-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "bs4": ["bs4.scss"],
    "bs5": ["bs5.scss"]
  }; }
  static get styleUrls() { return {
    "bs4": ["bs4.css"],
    "bs5": ["bs5.css"]
  }; }
  static get properties() { return {
    "theme": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "THEME | string",
        "resolved": "string",
        "references": {
          "THEME": {
            "location": "import",
            "path": "../../utils/types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "theme",
      "reflect": true,
      "defaultValue": "'primary'"
    },
    "size": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "SIZE",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "SIZE": {
            "location": "import",
            "path": "../../utils/types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "size",
      "reflect": true,
      "defaultValue": "'default'"
    },
    "mode": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "MODE",
        "resolved": "\"bs4\" | \"bs5\"",
        "references": {
          "MODE": {
            "location": "import",
            "path": "../../utils/types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "mode",
      "reflect": true
    },
    "type": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "BUTTON_TYPE",
        "resolved": "\"button\" | \"reset\" | \"submit\"",
        "references": {
          "BUTTON_TYPE": {
            "location": "local"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "type",
      "reflect": true,
      "defaultValue": "'button'"
    },
    "loading": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "loading",
      "reflect": true,
      "defaultValue": "false"
    },
    "disabled": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "disabled",
      "reflect": true,
      "defaultValue": "false"
    },
    "block": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "block",
      "reflect": true,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "tempDisabled": {}
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "loading",
      "methodName": "watchLoading"
    }]; }
  static get listeners() { return [{
      "name": "click",
      "method": "onClick",
      "target": undefined,
      "capture": true,
      "passive": false
    }]; }
}
