import { Component, h, Element, Prop, Host, State, Watch } from '@stencil/core';
import { v4 as uuidv4 } from 'uuid';
export class Select {
  constructor() {
    this.size = 'default';
    this.label = null;
    this.disabled = false;
    this.block = false;
    this.options = [];
  }
  watchOptions(newValue, _oldValue) {
    if (newValue.length === _oldValue.length) {
      return;
    }
    this.options = newValue.map((o) => (Object.assign(Object.assign({}, o), { value: o.value || '' })));
  }
  watchValue(newValue, _oldValue) {
    if (newValue === '') {
      return;
    }
    if (newValue === this.value) {
      return;
    }
    if (!newValue) {
      this.value = '';
    }
    else {
      this.value = newValue;
    }
  }
  handleOnChange(e) {
    this.value = e.target.value;
    e.preventDefault();
    e.stopPropagation();
    this.el.dispatchEvent(new e.constructor(e.type, e));
  }
  componentWillLoad() {
    this.ID = uuidv4();
    this.watchOptions(this.options, []);
    this.watchValue(this.value, null);
  }
  render() {
    return (h(Host, { style: { width: this.block ? '100%' : 'inherit', display: 'block' }, disabled: this.disabled, value: this.value },
      h("div", { class: { 'form-group': true } },
        h("label", { htmlFor: this.ID, class: {
            'select-label': true,
          }, style: { fontWeight: '500' } }, this.label),
        h("select", { id: this.ID, name: this.ID, class: {
            'form-select': this.mode === 'bs5',
            'form-select-sm': this.mode === 'bs5' && this.size === 'small',
            'form-select-lg': this.mode === 'bs5' && this.size === 'large',
            'form-control': this.mode === 'bs4',
            'form-control-sm': this.mode === 'bs4' && this.size === 'small',
            'form-control-lg': this.mode === 'bs4' && this.size === 'large',
            'custom-select': this.type === 'custom',
          }, "aria-label": ".form-select example", onChange: this.handleOnChange.bind(this), disabled: this.disabled },
          h("option", { selected: this.value === '', value: "" }, "Please pick.."),
          this.options.map((option) => {
            return (h("option", { selected: this.value === option.value, value: option.value }, option.label));
          })))));
  }
  static get is() { return "pf-select"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "bs4": ["bs4.scss"],
    "bs5": ["bs5.scss"]
  }; }
  static get styleUrls() { return {
    "bs4": ["bs4.css"],
    "bs5": ["bs5.css"]
  }; }
  static get properties() { return {
    "size": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "SIZE",
        "resolved": "\"default\" | \"large\" | \"small\"",
        "references": {
          "SIZE": {
            "location": "import",
            "path": "../../utils/types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "size",
      "reflect": true,
      "defaultValue": "'default'"
    },
    "label": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "label",
      "reflect": true,
      "defaultValue": "null"
    },
    "type": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "type",
      "reflect": true
    },
    "mode": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "MODE",
        "resolved": "\"bs4\" | \"bs5\"",
        "references": {
          "MODE": {
            "location": "import",
            "path": "../../utils/types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "mode",
      "reflect": true
    },
    "disabled": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "disabled",
      "reflect": true,
      "defaultValue": "false"
    },
    "block": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "block",
      "reflect": true,
      "defaultValue": "false"
    },
    "options": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "Array<Option>",
        "resolved": "Option[]",
        "references": {
          "Array": {
            "location": "global"
          },
          "Option": {
            "location": "local"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "[]"
    },
    "value": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "value",
      "reflect": true
    }
  }; }
  static get states() { return {
    "ID": {}
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "options",
      "methodName": "watchOptions"
    }, {
      "propName": "value",
      "methodName": "watchValue"
    }]; }
}
