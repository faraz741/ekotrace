import { Component, h, Host, Element, Prop, Listen, Watch, State, } from '@stencil/core';
export class PfDropdown {
  constructor() {
    this.fixedStyles = {
      left: 'inherit',
      right: `0`,
    };
    this.windowWidth = 0;
    this.isOpen = false;
    this.hideArrow = false;
    this.openOnButtonClick = true;
  }
  listenDocumentClick(event) {
    const target = event.target;
    if (this.el !== target && !this.el.contains(target)) {
      this.closeDropdown();
    }
  }
  listenBodyResize() {
    this.calculateFixedStyles();
  }
  watchClass(value) {
    if (!value.includes('dropdown')) {
      this.class = `dropdown ${value}`;
    }
  }
  calculateFixedStyles() {
    setTimeout(() => {
      this.windowWidth = document.body.offsetWidth;
      const buttonWidth = this.dropdownButton.offsetWidth;
      const menuWidth = this.dropdownMenu.offsetWidth;
      const buttonLeftPosition = this.dropdownButton.getBoundingClientRect().left;
      // Pixels that from left of the screen to the right of the buttons
      const visiblePart = buttonLeftPosition + buttonWidth + 5;
      if (visiblePart < menuWidth) {
        if (this.windowWidth < menuWidth) {
          this.fixedStyles = {
            left: 'inherit',
            right: `${visiblePart + 5 - this.windowWidth}px`,
          };
        }
        else {
          this.fixedStyles = {
            left: 'inherit',
            right: `${menuWidth - 5 - this.windowWidth}px`,
          };
        }
      }
      else {
        this.fixedStyles = { left: 'inherit', right: `0` };
      }
    }, 0);
  }
  componentDidLoad() {
    this.calculateFixedStyles();
  }
  handleOnButtonClick() {
    if (this.openOnButtonClick) {
      this.toggleDropdown();
    }
  }
  openDropdown() {
    this.isOpen = true;
    this.calculateFixedStyles();
  }
  closeDropdown() {
    this.isOpen = false;
  }
  toggleDropdown() {
    if (this.isOpen) {
      this.closeDropdown();
    }
    else {
      this.openDropdown();
    }
  }
  render() {
    return (h(Host, null,
      h("div", { ref: (el) => (this.dropdownButton = el), class: "dropdown-head", onClick: this.handleOnButtonClick.bind(this) },
        h("slot", { name: "button" }),
        !this.hideArrow && (h("i", { class: { arrow: true, down: !this.isOpen, up: this.isOpen }, style: { margin: this.isOpen ? '3px 3px 0 0' : '0 3px 3px 0' } }))),
      h("div", { ref: (el) => (this.dropdownMenu = el), class: {
          'dropdown-menu': true,
          show: this.isOpen,
        }, style: Object.assign({}, this.fixedStyles) },
        h("slot", { name: "menu" }))));
  }
  static get is() { return "pf-dropdown"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "bs4": ["bs4.scss"],
    "bs5": ["bs5.scss"]
  }; }
  static get styleUrls() { return {
    "bs4": ["bs4.css"],
    "bs5": ["bs5.css"]
  }; }
  static get properties() { return {
    "class": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "class",
      "reflect": true
    },
    "isOpen": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "is-open",
      "reflect": true,
      "defaultValue": "false"
    },
    "mode": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "MODE",
        "resolved": "\"bs4\" | \"bs5\"",
        "references": {
          "MODE": {
            "location": "import",
            "path": "../../utils/types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "mode",
      "reflect": true
    },
    "hideArrow": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "hide-arrow",
      "reflect": true,
      "defaultValue": "false"
    },
    "openOnButtonClick": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "open-on-button-click",
      "reflect": true,
      "defaultValue": "true"
    }
  }; }
  static get states() { return {
    "fixedStyles": {},
    "windowWidth": {}
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "class",
      "methodName": "watchClass"
    }]; }
  static get listeners() { return [{
      "name": "click",
      "method": "listenDocumentClick",
      "target": "window",
      "capture": false,
      "passive": false
    }, {
      "name": "resize",
      "method": "listenBodyResize",
      "target": "window",
      "capture": false,
      "passive": true
    }]; }
}
