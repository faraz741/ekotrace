import { Component, h, Host, Element, Prop, State, Watch } from '@stencil/core';
import { decodeURL, getObjectUrl, loadingSvg, noImageSvg, } from '../../utils/utils';
export class Image {
  constructor() {
    this.src = '';
    this.fallbackSrc = '';
    this.alt = '';
    this.loading = false;
    this.rounded = false;
    this.hasSrcfailed = false;
    this.hasFallbackSrcfailed = false;
    this.imageLoading = false;
  }
  watchLoading(value) {
    this.imageLoading = value;
  }
  watchSrc(value) {
    if (value && !decodeURL(value) && value.charAt(0) !== '/') {
      this.src = `/${value}`;
    }
    this.hasSrcfailed = false;
    this.hasFallbackSrcfailed = false;
    this.imageLoading = true;
  }
  watchFallbackSrc(value) {
    if (value && !decodeURL(value) && value.charAt(0) !== '/') {
      this.fallbackSrc = `/${value}`;
    }
    this.hasSrcfailed = false;
    this.hasFallbackSrcfailed = false;
    this.imageLoading = true;
  }
  onImageLoad(event) {
    const imagePath = decodeURL(event.target.src).pathname;
    const srcPath = decodeURL(this.src)
      ? decodeURL(this.src).pathname
      : this.src;
    const fallbackSrcPath = decodeURL(this.fallbackSrc)
      ? decodeURL(this.fallbackSrc).pathname
      : this.fallbackSrc;
    if (!this.hasSrcfailed && (!this.src || imagePath === srcPath)) {
      this.hasSrcfailed = false;
    }
    if (!this.hasFallbackSrcfailed &&
      (!this.fallbackSrc || imagePath === fallbackSrcPath)) {
      this.hasFallbackSrcfailed = false;
    }
    this.imageLoading = false;
  }
  onImageError(event) {
    const imagePath = decodeURL(event.target.src).pathname;
    const srcPath = decodeURL(this.src)
      ? decodeURL(this.src).pathname
      : this.src;
    const fallbackSrcPath = decodeURL(this.fallbackSrc)
      ? decodeURL(this.fallbackSrc).pathname
      : this.fallbackSrc;
    if (!this.hasSrcfailed && (!this.src || imagePath === srcPath)) {
      this.hasSrcfailed = true;
    }
    if (!this.hasFallbackSrcfailed &&
      (!this.fallbackSrc || imagePath === fallbackSrcPath)) {
      this.hasFallbackSrcfailed = true;
    }
    this.imageLoading = false;
  }
  componentWillLoad() {
    this.imageLoading = true;
  }
  getImageUrl() {
    if (this.imageLoading || this.loading) {
      return getObjectUrl(loadingSvg);
    }
    if (this.src && !this.hasSrcfailed) {
      return this.src;
    }
    if (this.fallbackSrc && !this.hasFallbackSrcfailed) {
      return this.fallbackSrc;
    }
    return getObjectUrl(noImageSvg);
  }
  render() {
    return (h(Host, null,
      h("img", { class: { rounded: this.rounded }, style: {
          width: `${this.width}px`,
          height: `${this.height}px`,
        }, src: this.getImageUrl(), alt: this.alt, width: this.width, height: this.height, onLoad: this.onImageLoad.bind(this), onError: this.onImageError.bind(this) })));
  }
  static get is() { return "pf-image"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["style.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["style.css"]
  }; }
  static get properties() { return {
    "src": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "src",
      "reflect": true,
      "defaultValue": "''"
    },
    "fallbackSrc": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "fallback-src",
      "reflect": true,
      "defaultValue": "''"
    },
    "alt": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "alt",
      "reflect": true,
      "defaultValue": "''"
    },
    "width": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "width",
      "reflect": true
    },
    "height": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "height",
      "reflect": true
    },
    "loading": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "loading",
      "reflect": true,
      "defaultValue": "false"
    },
    "rounded": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "rounded",
      "reflect": true,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "hasSrcfailed": {},
    "hasFallbackSrcfailed": {},
    "imageLoading": {}
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "loading",
      "methodName": "watchLoading"
    }, {
      "propName": "src",
      "methodName": "watchSrc"
    }, {
      "propName": "fallbackSrc",
      "methodName": "watchFallbackSrc"
    }]; }
}
